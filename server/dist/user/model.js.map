{"version":3,"sources":["../../src/user/model.js"],"names":["Schema","mongoose","name","first","String","last","email","type","unique","lowercase","emailVerified","Boolean","default","password","phone","number","verified","pre","next","user","bcrypt","genSalt","err","salt","hash","methods","comparedPassword","candidatePassword","cb","compare","good","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA,IAAMA,SAAS,IAAIC,mBAASD,MAAb,CAAoB;AAC/BE,UAAM;AACFC,eAAOC,MADL;AAEFC,cAAMD;AAFJ,KADyB;AAK/BE,WAAO;AACHC,cAAMH,MADH;AAEHI,gBAAQ,IAFL;AAGHC,mBAAW;AAHR,KALwB;AAU/BC,mBAAe;AACXH,cAAMI,OADK;AAEXC,iBAAS;AAFE,KAVgB;AAc/BC,cAAUT,MAdqB;AAe/BU,WAAO;AACHC,gBAAQ;AACJR,kBAAMH;AADF,SADL;AAIHY,kBAAU;AACNT,kBAAMI,OADA;AAENC,qBAAS;AAFH;AAJP;AAfwB,CAApB,CAAf;;AA0BAZ,OAAOiB,GAAP,CAAW,MAAX,EAAmB,UAASC,IAAT,EAAc;AAC7B;AACA,QAAMC,OAAO,IAAb;;AAEAC,2BAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAmB;AAClC,YAAID,GAAJ,EAAS;AAAE,mBAAOJ,KAAKI,GAAL,CAAP;AAAkB;;AAE7BF,+BAAOI,IAAP,CAAYL,KAAKN,QAAjB,EAA2BU,IAA3B,EAAiC,IAAjC,EAAuC,UAASD,GAAT,EAAcE,IAAd,EAAmB;AACtD,gBAAIF,GAAJ,EAAS;AAAE,uBAAOJ,KAAKI,GAAL,CAAP;AAAmB;;AAE9BH,iBAAKN,QAAL,GAAgBW,IAAhB;AACAN;AACH,SALD;AAMH,KATD;AAUH,CAdD;;AAgBA;AACAlB,OAAOyB,OAAP,CAAeC,gBAAf,GAAkC,UAASC,iBAAT,EAA4BC,EAA5B,EAAgC;AAC9DR,2BAAOS,OAAP,CAAeF,iBAAf,EAAkC,KAAKd,QAAvC,EAAiD,UAASS,GAAT,EAAcQ,IAAd,EAAmB;AAChE,YAAIR,GAAJ,EAAU;AAAE,mBAAOM,GAAGN,GAAH,CAAP;AAAe;AAC3BM,WAAG,IAAH,EAASE,IAAT;AACH,KAHD;AAIH,CALD;;AAOA;kBACe7B,mBAAS8B,KAAT,CAAe,MAAf,EAAuB/B,MAAvB,C","file":"model.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt-nodejs';\r\n\r\n// Define the model\r\nconst Schema = new mongoose.Schema({\r\n    name: {\r\n        first: String,\r\n        last: String,\r\n    },\r\n    email: {\r\n        type: String,\r\n        unique: true,\r\n        lowercase: true\r\n    },\r\n    emailVerified: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    password: String,\r\n    phone: {\r\n        number: {\r\n            type: String\r\n        },\r\n        verified: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    }\r\n})\r\n\r\nSchema.pre('save', function(next){\r\n    // get access to user model, then we can use user.email, user.password\r\n    const user = this;\r\n\r\n    bcrypt.genSalt(10, function(err, salt){\r\n        if (err) { return next(err) }\r\n\r\n        bcrypt.hash(user.password, salt, null, function(err, hash){\r\n            if (err) { return next(err); }\r\n\r\n            user.password = hash;\r\n            next()\r\n        })\r\n    })\r\n})\r\n\r\n// Make use of methods for comparedPassword\r\nSchema.methods.comparedPassword = function(candidatePassword, cb) {\r\n    bcrypt.compare(candidatePassword, this.password, function(err, good){\r\n        if (err ) { return cb(err)}\r\n        cb(null, good);\r\n    })\r\n}\r\n\r\n// Export the model\r\nexport default mongoose.model('User', Schema);"]}