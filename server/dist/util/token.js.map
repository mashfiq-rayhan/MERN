{"version":3,"sources":["../../src/util/token.js"],"names":["generateToken","user","timeStamp","Date","getTime","payload","sub","id","iat","jwt","encode","config","jwt_secret","verifyToken","token","cb","decode","Error"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AACXA,mBAAe,uBAAUC,IAAV,EAAgB;AAC3B,YAAMC,YAAY,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,YAAMC,UAAU;AACZC,iBAAKL,KAAKM,EADE;AAEZC,iBAAKN;AAFO,SAAhB;AAIA,eAAOO,oBAAIC,MAAJ,CAAWL,OAAX,EAAoBM,iBAAOC,UAA3B,CAAP;AACH,KARU;AASXC,iBAAa,qBAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AAC9B,YAAMC,SAASP,oBAAIO,MAAJ,CAAWF,KAAX,EAAkBH,iBAAOC,UAAzB,CAAf;AACA,YAAI,CAACI,MAAL,EAAa,OAAOD,GAAG,IAAIE,KAAJ,CAAU,wBAAV,CAAH,CAAP;AACbF,WAAG,IAAH,EAASC,MAAT;AACH;AAbU,C","file":"token.js","sourcesContent":["import jwt from 'jwt-simple';\r\nimport config from '../config';\r\n\r\nexport default {\r\n    generateToken: function (user) {\r\n        const timeStamp = new Date().getTime();\r\n        const payload = {\r\n            sub: user.id,\r\n            iat: timeStamp\r\n        }\r\n        return jwt.encode(payload, config.jwt_secret);\r\n    },\r\n    verifyToken: function (token, cb) {\r\n        const decode = jwt.decode(token, config.jwt_secret)\r\n        if (!decode) return cb(new Error('Token is not verified.'));\r\n        cb(null, decode);\r\n    }\r\n}"]}