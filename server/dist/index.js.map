{"version":3,"sources":["../src/index.js"],"names":["process","env","JWT_SECRET","err","Error","console","error","app","mongoose","connect","config","uri","useNewUrlParser","useUnifiedTopology","catch","Promise","global","use","origin","bodyParser","json","urlencoded","extended","get","req","res","send","post","Authentication","signup","signin","Middlewares","loginRequired","UserRouter","next","log","message","status","port","PORT","http","createServer","listen"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAG,CAACA,QAAQC,GAAR,CAAYC,UAAhB,EAA4B;AACxB,QAAMC,MAAM,IAAIC,KAAJ,CAAU,8GAAV,CAAZ;AACAC,YAAQC,KAAR,CAAcH,GAAd;AACH;;AAED,IAAMI,MAAM,wBAAZ;;AAEAC,mBAASC,OAAT,CAAiBC,iBAAOF,QAAP,CAAgBG,GAAjC,EAAsC,EAAEC,iBAAiB,IAAnB,EAAyBC,oBAAoB,IAA7C,EAAtC,EACCC,KADD,CACO;AAAA,WAAKT,QAAQC,KAAR,CAAcH,GAAd,CAAL;AAAA,CADP;;AAGAK,mBAASO,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA;AACAR,IAAIU,GAAJ,CAAQ,oBAAK;AACTC,YAAQ,CAAC,+BAAD,EAAkC,uBAAlC;AADC,CAAL,CAAR;AAGAX,IAAIU,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAV,IAAIU,GAAJ,CAAQE,qBAAWC,IAAX,EAAR;AACAb,IAAIU,GAAJ,CAAQE,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;AACAf,IAAIgB,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,IAAJ,CAAS,MAAT,CAAd;AAAA,CAAjB;AACAnB,IAAIgB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIL,IAAJ,CAAS,EAAC,UAAU,uCAAX,EAAT,CAAd;AAAA,CAAb;AACAb,IAAIoB,IAAJ,CAAS,SAAT,EAAoBC,yBAAeC,MAAnC;AACAtB,IAAIoB,IAAJ,CAAS,SAAT,EAAoBC,yBAAeE,MAAnC;AACAvB,IAAIgB,GAAJ,CAAQ,YAAR,EAAsBQ,sBAAYC,aAAlC,EAAiD,UAACR,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,IAAJ,CAAS,WAAT,CAAd;AAAA,CAAjD;AACAnB,IAAIU,GAAJ,CAAQ,OAAR,EAAiBc,sBAAYC,aAA7B,EAA4CC,gBAA5C;;AAEA1B,IAAIU,GAAJ,CAAQ,UAACd,GAAD,EAAMqB,GAAN,EAAWC,GAAX,EAAgBS,IAAhB,EAAyB;AAC7B7B,YAAQ8B,GAAR,CAAY,QAAZ,EAAsBhC,IAAIiC,OAA1B;AACAX,QAAIY,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqBjB,IAAIiC,OAAzB;AACH,CAHD;;AAKA;AACA,IAAME,OAAOtC,QAAQC,GAAR,CAAYsC,IAAZ,IAAoB,IAAjC;AACAC,eAAKC,YAAL,CAAkBlC,GAAlB,EAAuBmC,MAAvB,CAA8BJ,IAA9B,EAAoC,YAAI;AACpCjC,YAAQ8B,GAAR,uCAAgDG,IAAhD;AACH,CAFD","file":"index.js","sourcesContent":["\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport bodyParser from 'body-parser';\r\nimport morgan from 'morgan';\r\nimport mongoose from 'mongoose';\r\nimport cors from 'cors';\r\nimport config from './config';\r\nimport Middlewares from './api/middlewares'\r\nimport Authentication from './api/authentication'\r\nimport UserRouter from './user/router'\r\n\r\nif(!process.env.JWT_SECRET) {\r\n    const err = new Error('No JWT_SECRET in env variable, check instructions: https://github.com/amazingandyyy/mern#prepare-your-secret');\r\n    console.error(err);\r\n}\r\n\r\nconst app = express();\r\n\r\nmongoose.connect(config.mongoose.uri, { useNewUrlParser: true, useUnifiedTopology: true })\r\n.catch(err=>console.error(err));\r\n\r\nmongoose.Promise = global.Promise;\r\n\r\n// App Setup\r\napp.use(cors({\r\n    origin: ['https://www.amazingandyyy.com', 'http://localhost:3000']\r\n}));\r\napp.use(morgan('dev'));\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({extended: false}));\r\napp.get('/ping', (req, res) => res.send('pong'))\r\napp.get('/', (req, res) => res.json({'source': 'https://github.com/amazingandyyy/mern'}))\r\napp.post('/signup', Authentication.signup)\r\napp.post('/signin', Authentication.signin)\r\napp.get('/auth-ping', Middlewares.loginRequired, (req, res) => res.send('connected'))\r\napp.use('/user', Middlewares.loginRequired, UserRouter)\r\n\r\napp.use((err, req, res, next) => {\r\n    console.log('Error:', err.message);\r\n    res.status(422).json(err.message);\r\n});\r\n\r\n// Server Setup\r\nconst port = process.env.PORT || 8000\r\nhttp.createServer(app).listen(port, ()=>{\r\n    console.log(`\\x1b[32m`, `Server listening on: ${port}`, `\\x1b[0m`)\r\n});\r\n"]}